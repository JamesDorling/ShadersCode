#version 450 core
layout(triangles, equal_spacing, ccw) in;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2);
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2);
float hash(float n);
float snoise(vec3 x);
float noise(vec3 position, int octaves);

//Receive uniforms from the CPU
uniform mat4 view;
uniform mat4 projection;

uniform int terrMode;

uniform sampler2D heightMap;
uniform int scale;

uniform vec3 camPos;
uniform int fogMode;

uniform int octaves;

uniform mat4 lightSpaceMatrix;

in TC_OUT
{
	vec2 tcUV;
	vec3 tcFragPos;
}te_in[];


out TE_OUT
{
	vec3 teFragPos;
	vec2 teUV;
	vec3 teNormal;
	float height; //Passing this through, as it didnt seem to work without doing this. Not that it works great even with this.
	float vis;
	float dist;
	vec4 fragPosLightSpace;
}te_out;

void main()
{


	//NON PN TRIANGLES
	te_out.teFragPos = interpolate3D(te_in[0].tcFragPos, te_in[1].tcFragPos, te_in[2].tcFragPos);

	te_out.teUV = interpolate2D(te_in[0].tcUV, te_in[1].tcUV, te_in[2].tcUV);

	if(terrMode != 1) //If perlin noise shouldnt be used
	{
		//Normal Calculations
		float right = (textureOffset(heightMap, te_out.teUV, ivec2(1, 0)).r)*scale;
		float left = (textureOffset(heightMap, te_out.teUV, ivec2(-1, 0)).r)*scale;
		float up = (textureOffset(heightMap, te_out.teUV, ivec2(0, 1)).r)*scale;
		float down = (textureOffset(heightMap, te_out.teUV, ivec2(0, -1)).r)*scale;
		//These texture offsets create points to each direction of the vertex, that can be used below to calculate the normal

		//Use the points to get the normal by getting two edges
		float lr = left - right; 
		float du = up - down;
		te_out.teNormal = normalize(vec3(lr, 2.0, du)); //Calculate the normal

		//HEIGHT MAP STUFF
		te_out.height = texture(heightMap, te_out.teUV).r; //this gives a value in a [0,1] range
		te_out.teFragPos.y = te_out.height * scale; //Multiply the height by a scale value so that its large enough to look real
	}
	else if(terrMode == 1) //If perlin noise is being used
	{
		te_out.teFragPos.y = noise(te_out.teFragPos, octaves); //Calculate the height based on perlin noise
		te_out.height = te_out.teFragPos.y; // pass through the height values
		te_out.teNormal = vec3(0.0, 0.0, 0.0); //Pass through an empty normal as it will be caluclated in the geography shader
	}
	
	//FOG
	te_out.dist = distance(camPos, te_out.teFragPos);  //Calculate the distance from the camera
	if(fogMode == 1) //If fog is on and using linear calculations
	{
		te_out.vis = 10 + (0.04 * -te_out.dist); //Calculate the fog linearly
	}
	else 
	{
		te_out.vis = exp(-pow((te_out.dist*0.005), 10)); //Otherwise calculate it exponentially
	}
	te_out.vis = clamp(te_out.vis, 0.0, 1.0); //Clamp the visibility between 0 and 1

	te_out.fragPosLightSpace = lightSpaceMatrix * vec4(te_out.teFragPos, 1.0); //Calculate the fragment position in light space
	

	//NECCESSARY EITHER WAY
	gl_Position = projection * view * vec4(te_out.teFragPos, 1.0); //Calculate the gl_Position
}

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2; //Use the tessellated coordinates to interpolate a value
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2; //Use the tessellated coordinates to interpolate a value
}

//Perlin noise height generation
float hash(float n) 
{
    return fract(sin(n) * 753.5453123);
}

float snoise(vec3 x)
{
	vec3 p = floor(x);
	vec3 f = fract(x);
	f = f * f * (3.0 - (2.0 * f));

	float n = p.x + p.y * 157.0 + 113.0 * p.z;
	return mix(mix(mix(hash(n + 0.0), hash(n + 1.0), f.x),
		mix(hash(n + 157.0), hash(n + 158.0), f.x), f.y),
		mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),
			mix(hash(n + 270.0), hash(n + 271.0), f.x), f.y), f.z);
}

float noise(vec3 position, int octaves)
{
	float total = 0.0;
	float frequency = 0.007;
	float maxAmplitude = 0.0;
	float amplitude = 10.0;
	for (int i = 0; i < octaves; i++)
	{
		total += snoise(position * frequency) * amplitude;
		frequency *= 2.0;
		amplitude /= 2.0;
		maxAmplitude += amplitude;
	}
	return (total / maxAmplitude) * scale;
}