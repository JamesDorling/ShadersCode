#version 450 core
layout (vertices = 3) out;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//SHADER IS ESSENTIALLY THE SAME AS THE "tessCont.tcs" SHADER, HOWEVER WITH A LOT TAKEN OUT AS IT WAS UNECESSARY.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float GetTessLevel(float Dist1, float Dist2);

in VS_OUT
{
	vec2 vUV;
	vec3 FragPos;
}tc_in[];

out TC_OUT
{
	vec2 tcUV;
	vec3 tcFragPos;
}tc_out[];


uniform vec3 camPos;

void main()
{
	if (gl_InvocationID == 0)
	{
		vec3 eye  = vec3(camPos.x, 0, camPos.z);
		vec3 Pos1 = vec3(tc_in[0].FragPos.x, 0, tc_in[0].FragPos.z);
		vec3 Pos2 = vec3(tc_in[1].FragPos.x, 0, tc_in[1].FragPos.z);
		vec3 Pos3 = vec3(tc_in[2].FragPos.x, 0, tc_in[2].FragPos.z);

		float eyeToVertexDist0 = distance(eye, Pos1);
		float eyeToVertexDist1 = distance(eye, Pos2);
		float eyeToVertexDist2 = distance(eye, Pos3);

		gl_TessLevelOuter[0] = GetTessLevel(eyeToVertexDist1, eyeToVertexDist2);
		gl_TessLevelOuter[1] = GetTessLevel(eyeToVertexDist2, eyeToVertexDist0);
		gl_TessLevelOuter[2] = GetTessLevel(eyeToVertexDist0, eyeToVertexDist1);
		gl_TessLevelInner[0] = gl_TessLevelOuter[1];
	}

	tc_out[gl_InvocationID].tcUV		= tc_in[gl_InvocationID].vUV;
	tc_out[gl_InvocationID].tcFragPos	= tc_in[gl_InvocationID].FragPos;
}

float GetTessLevel(float Dist1, float Dist2)
{
	float avgDist = (Dist1 + Dist2) / 2.0;
	//float tess = 10.0 + (0.03 * -avgDist); //negative distance used because closer should mean higher. Thats multiplied by 0.03 to make it happen further away.
	float tess = exp(-pow((avgDist * 0.0025), 3.5)) * 5;
	if(tess < 1)// && avgDist < 500) //Make it so that tess cannot be 0 unless really far (Will be obscured by fog when I can get it to work)
	{
		tess = 1;
	}
	else if(tess > 8) //Limit tess so that being super close doesnt mean your machine breaks, tweak later?
	{
		tess = 8;
	}
	if(avgDist < 300 && tess < 2) //Set the tess to 2 with a step to make it so that average distance means average detail
	{
		tess = 2;
	}
	return tess;
}