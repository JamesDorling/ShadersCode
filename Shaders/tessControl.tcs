#version 450 core
layout (vertices = 3) out;

float GetTessLevel(float Dist1, float Dist2);

in VS_OUT
{
	vec2 vUV;
	vec3 FragPos;
}tc_in[];

out TC_OUT
{
	vec2 tcUV;
	vec3 tcFragPos;
}tc_out[];

uniform vec3 camPos;

void main()
{
	
	if (gl_InvocationID == 0)
	{
		vec2 eye  = vec2(camPos.x, camPos.z); //get the camera position without the Y axis
		vec2 Pos1 = vec2(tc_in[0].FragPos.x, tc_in[0].FragPos.z); //Get each vertex position without the Y axis
		vec2 Pos2 = vec2(tc_in[1].FragPos.x, tc_in[1].FragPos.z);
		vec2 Pos3 = vec2(tc_in[2].FragPos.x, tc_in[2].FragPos.z);

		float eyeToVertexDist0 = distance(eye, Pos1); //Calculate distances from the eye to each vertex without the Y axis being a factor
		float eyeToVertexDist1 = distance(eye, Pos2);
		float eyeToVertexDist2 = distance(eye, Pos3);

		//float eyeToVertexDist0 = distance(camPos, tc_in[0].FragPos);
		//float eyeToVertexDist1 = distance(camPos, tc_in[1].FragPos);
		//float eyeToVertexDist2 = distance(camPos, tc_in[2].FragPos);

		gl_TessLevelOuter[0] = GetTessLevel(eyeToVertexDist1, eyeToVertexDist2); //Calculate the tesselation values for each part of the fragment
		gl_TessLevelOuter[1] = GetTessLevel(eyeToVertexDist2, eyeToVertexDist0);
		gl_TessLevelOuter[2] = GetTessLevel(eyeToVertexDist0, eyeToVertexDist1);
		gl_TessLevelInner[0] = gl_TessLevelOuter[1]; //Middle of the triangle is set to the same as one of the sides
	}

	tc_out[gl_InvocationID].tcUV		= tc_in[gl_InvocationID].vUV; //Pass through the UV coordinates
	tc_out[gl_InvocationID].tcFragPos	= tc_in[gl_InvocationID].FragPos; //Pass through the fragpos
}

float GetTessLevel(float Dist1, float Dist2)
{
	float avgDist = (Dist1 + Dist2) / 2.0;
	//float tess = 10.0 + (0.02 * -avgDist); //negative distance used because closer should mean higher. Thats multiplied by 0.02 to make it happen further away.
	float tess = exp(-pow((avgDist * 0.0025), 3.5)) * 5; //Calculate the tesselation exponentially. thsi is then multiplied by five, as without that the value was too low, and this seems to work.

	if(tess < 1)// && avgDist < 500) //Make it so that tess cannot be 0 unless really far
	{
		tess = 1;
	}
	else if(tess > 8) //Limit tess so that being super close doesnt mean your machine breaks, tweak later?
	{
		tess = 8;
	}

	return tess; //Return the tesselation value
}